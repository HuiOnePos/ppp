// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ppp.proto

package micro_proto3_ppp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Accounttype int32

const (
	Accounttype_id    Accounttype = 0
	Accounttype_login Accounttype = 1
)

var Accounttype_name = map[int32]string{
	0: "id",
	1: "login",
}
var Accounttype_value = map[string]int32{
	"id":    0,
	"login": 1,
}

func (x Accounttype) String() string {
	return proto.EnumName(Accounttype_name, int32(x))
}
func (Accounttype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{0}
}

type Tradetype int32

const (
	Tradetype_BAR   Tradetype = 0
	Tradetype_WAP   Tradetype = 1
	Tradetype_APP   Tradetype = 2
	Tradetype_WEB   Tradetype = 3
	Tradetype_JSAPI Tradetype = 4
	Tradetype_MINIP Tradetype = 5
	Tradetype_CBAR  Tradetype = 6
)

var Tradetype_name = map[int32]string{
	0: "BAR",
	1: "WAP",
	2: "APP",
	3: "WEB",
	4: "JSAPI",
	5: "MINIP",
	6: "CBAR",
}
var Tradetype_value = map[string]int32{
	"BAR":   0,
	"WAP":   1,
	"APP":   2,
	"WEB":   3,
	"JSAPI": 4,
	"MINIP": 5,
	"CBAR":  6,
}

func (x Tradetype) String() string {
	return proto.EnumName(Tradetype_name, int32(x))
}
func (Tradetype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{1}
}

type Tradestatus int32

const (
	Tradestatus_waitepay Tradestatus = 0
	Tradestatus_succ     Tradestatus = 1
	Tradestatus_paying   Tradestatus = 2
	Tradestatus_cancel   Tradestatus = 3
	Tradestatus_closed   Tradestatus = 4
	Tradestatus_refunded Tradestatus = 5
)

var Tradestatus_name = map[int32]string{
	0: "waitepay",
	1: "succ",
	2: "paying",
	3: "cancel",
	4: "closed",
	5: "refunded",
}
var Tradestatus_value = map[string]int32{
	"waitepay": 0,
	"succ":     1,
	"paying":   2,
	"cancel":   3,
	"closed":   4,
	"refunded": 5,
}

func (x Tradestatus) String() string {
	return proto.EnumName(Tradestatus_name, int32(x))
}
func (Tradestatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{2}
}

type Accountstatus int32

const (
	Accountstatus_unauth Accountstatus = 0
	Accountstatus_ok     Accountstatus = 1
	Accountstatus_forbid Accountstatus = 2
)

var Accountstatus_name = map[int32]string{
	0: "unauth",
	1: "ok",
	2: "forbid",
}
var Accountstatus_value = map[string]int32{
	"unauth": 0,
	"ok":     1,
	"forbid": 2,
}

func (x Accountstatus) String() string {
	return proto.EnumName(Accountstatus_name, int32(x))
}
func (Accountstatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{3}
}

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Scene struct {
	// 详情看wxpay的统一下单中的scene
	URL                  string   `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Scene) Reset()         { *m = Scene{} }
func (m *Scene) String() string { return proto.CompactTextString(m) }
func (*Scene) ProtoMessage()    {}
func (*Scene) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{1}
}
func (m *Scene) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scene.Unmarshal(m, b)
}
func (m *Scene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scene.Marshal(b, m, deterministic)
}
func (dst *Scene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scene.Merge(dst, src)
}
func (m *Scene) XXX_Size() int {
	return xxx_messageInfo_Scene.Size(m)
}
func (m *Scene) XXX_DiscardUnknown() {
	xxx_messageInfo_Scene.DiscardUnknown(m)
}

var xxx_messageInfo_Scene proto.InternalMessageInfo

func (m *Scene) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Scene) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Transfer struct {
	// 商户交易号
	OutTradeID string `protobuf:"bytes,1,opt,name=OutTradeID,proto3" json:"OutTradeID,omitempty"`
	// 真实姓名
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// 付款金额
	Amount int64 `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// 付款备注
	Desc string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"Desc,omitempty"`
	// ip地址
	IPADDR string `protobuf:"bytes,5,opt,name=IPADDR,proto3" json:"IPADDR,omitempty"`
	// 收款方账号 支付宝的为支付宝登陆账号或者支付宝唯一用户id，微信的为appid下的openid
	Account string `protobuf:"bytes,6,opt,name=Account,proto3" json:"Account,omitempty"`
	// 来源 alipay or wxpay
	From string `protobuf:"bytes,7,opt,name=From,proto3" json:"From,omitempty"`
	// 收款方账号类型  ID: 唯一id，login: 登录名
	AccountType          Accounttype `protobuf:"varint,8,opt,name=AccountType,proto3,enum=micro.proto3.ppp.Accounttype" json:"AccountType,omitempty"`
	AppID                string      `protobuf:"bytes,9,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TradeID              string      `protobuf:"bytes,10,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{2}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transfer.Unmarshal(m, b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
}
func (dst *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(dst, src)
}
func (m *Transfer) XXX_Size() int {
	return xxx_messageInfo_Transfer.Size(m)
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetOutTradeID() string {
	if m != nil {
		return m.OutTradeID
	}
	return ""
}

func (m *Transfer) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Transfer) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transfer) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Transfer) GetIPADDR() string {
	if m != nil {
		return m.IPADDR
	}
	return ""
}

func (m *Transfer) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Transfer) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transfer) GetAccountType() Accounttype {
	if m != nil {
		return m.AccountType
	}
	return Accounttype_id
}

func (m *Transfer) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Transfer) GetTradeID() string {
	if m != nil {
		return m.TradeID
	}
	return ""
}

type TransferResult struct {
	Data                 *Transfer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TransferResult) Reset()         { *m = TransferResult{} }
func (m *TransferResult) String() string { return proto.CompactTextString(m) }
func (*TransferResult) ProtoMessage()    {}
func (*TransferResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{3}
}
func (m *TransferResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResult.Unmarshal(m, b)
}
func (m *TransferResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResult.Marshal(b, m, deterministic)
}
func (dst *TransferResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResult.Merge(dst, src)
}
func (m *TransferResult) XXX_Size() int {
	return xxx_messageInfo_TransferResult.Size(m)
}
func (m *TransferResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResult.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResult proto.InternalMessageInfo

func (m *TransferResult) GetData() *Transfer {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransferResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type User struct {
	UserID               string        `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ID                   string        `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	MchID                string        `protobuf:"bytes,3,opt,name=MchID,proto3" json:"MchID,omitempty"`
	From                 string        `protobuf:"bytes,4,opt,name=From,proto3" json:"From,omitempty"`
	AppID                string        `protobuf:"bytes,5,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Status               Accountstatus `protobuf:"varint,6,opt,name=Status,proto3,enum=micro.proto3.ppp.Accountstatus" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{4}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *User) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *User) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *User) GetStatus() Accountstatus {
	if m != nil {
		return m.Status
	}
	return Accountstatus_unauth
}

type UserResult struct {
	Data                 *User    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResult) Reset()         { *m = UserResult{} }
func (m *UserResult) String() string { return proto.CompactTextString(m) }
func (*UserResult) ProtoMessage()    {}
func (*UserResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{5}
}
func (m *UserResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResult.Unmarshal(m, b)
}
func (m *UserResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResult.Marshal(b, m, deterministic)
}
func (dst *UserResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResult.Merge(dst, src)
}
func (m *UserResult) XXX_Size() int {
	return xxx_messageInfo_UserResult.Size(m)
}
func (m *UserResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserResult proto.InternalMessageInfo

func (m *UserResult) GetData() *User {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type Params struct {
	ReturnURL  string `protobuf:"bytes,1,opt,name=ReturnURL,proto3" json:"ReturnURL,omitempty"`
	OutTradeID string `protobuf:"bytes,2,opt,name=OutTradeID,proto3" json:"OutTradeID,omitempty"`
	TradeName  string `protobuf:"bytes,3,opt,name=TradeName,proto3" json:"TradeName,omitempty"`
	Amount     int64  `protobuf:"varint,5,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// 商品表述
	ItemDes string `protobuf:"bytes,6,opt,name=ItemDes,proto3" json:"ItemDes,omitempty"`
	// 店铺id
	ShopID string `protobuf:"bytes,7,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	// 共用回传参数
	EX string `protobuf:"bytes,8,opt,name=EX,proto3" json:"EX,omitempty"`
	// 支付宝使用服务商模式中的自身收款，微信支付有些需要传userid
	UserID string `protobuf:"bytes,9,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MchID  string `protobuf:"bytes,10,opt,name=MchID,proto3" json:"MchID,omitempty"`
	IPADDR string `protobuf:"bytes,11,opt,name=IPADDR,proto3" json:"IPADDR,omitempty"`
	//    tradescene // 场景
	Scene *Scene `protobuf:"bytes,12,opt,name=Scene,proto3" json:"Scene,omitempty"`
	// 与sub_openid 二选一  支付用户在公众号或小程序的用户openid
	OpenID string `protobuf:"bytes,13,opt,name=OpenID,proto3" json:"OpenID,omitempty"`
	// 与openid 二选一  支付用户在公众号或小程序的openid
	SubOpenID string `protobuf:"bytes,14,opt,name=SubOpenID,proto3" json:"SubOpenID,omitempty"`
	// 子商户appid,服务商模式使用，公众号支付为子商户公众号appid，小程序为子商户小程序appid,不传模式使用authsigned时传入的subappid
	SubAppID string    `protobuf:"bytes,15,opt,name=SubAppID,proto3" json:"SubAppID,omitempty"`
	Type     Tradetype `protobuf:"varint,16,opt,name=Type,proto3,enum=micro.proto3.ppp.Tradetype" json:"Type,omitempty"`
	// 异步通知地址， 不传默认使用配置文件中的设置
	NotifyURL            string   `protobuf:"bytes,17,opt,name=NotifyURL,proto3" json:"NotifyURL,omitempty"`
	AppID                string   `protobuf:"bytes,18,opt,name=AppID,proto3" json:"AppID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{6}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Params.Unmarshal(m, b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Params.Marshal(b, m, deterministic)
}
func (dst *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(dst, src)
}
func (m *Params) XXX_Size() int {
	return xxx_messageInfo_Params.Size(m)
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetReturnURL() string {
	if m != nil {
		return m.ReturnURL
	}
	return ""
}

func (m *Params) GetOutTradeID() string {
	if m != nil {
		return m.OutTradeID
	}
	return ""
}

func (m *Params) GetTradeName() string {
	if m != nil {
		return m.TradeName
	}
	return ""
}

func (m *Params) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Params) GetItemDes() string {
	if m != nil {
		return m.ItemDes
	}
	return ""
}

func (m *Params) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *Params) GetEX() string {
	if m != nil {
		return m.EX
	}
	return ""
}

func (m *Params) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Params) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *Params) GetIPADDR() string {
	if m != nil {
		return m.IPADDR
	}
	return ""
}

func (m *Params) GetScene() *Scene {
	if m != nil {
		return m.Scene
	}
	return nil
}

func (m *Params) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *Params) GetSubOpenID() string {
	if m != nil {
		return m.SubOpenID
	}
	return ""
}

func (m *Params) GetSubAppID() string {
	if m != nil {
		return m.SubAppID
	}
	return ""
}

func (m *Params) GetType() Tradetype {
	if m != nil {
		return m.Type
	}
	return Tradetype_BAR
}

func (m *Params) GetNotifyURL() string {
	if m != nil {
		return m.NotifyURL
	}
	return ""
}

func (m *Params) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

type ParamsData struct {
	// sourcedata 支付参数的map数据jsonencode
	SourceData string `protobuf:"bytes,1,opt,name=SourceData,proto3" json:"SourceData,omitempty"`
	// params urlencode的数据
	Params               string   `protobuf:"bytes,2,opt,name=Params,proto3" json:"Params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamsData) Reset()         { *m = ParamsData{} }
func (m *ParamsData) String() string { return proto.CompactTextString(m) }
func (*ParamsData) ProtoMessage()    {}
func (*ParamsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{7}
}
func (m *ParamsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParamsData.Unmarshal(m, b)
}
func (m *ParamsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParamsData.Marshal(b, m, deterministic)
}
func (dst *ParamsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsData.Merge(dst, src)
}
func (m *ParamsData) XXX_Size() int {
	return xxx_messageInfo_ParamsData.Size(m)
}
func (m *ParamsData) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsData.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsData proto.InternalMessageInfo

func (m *ParamsData) GetSourceData() string {
	if m != nil {
		return m.SourceData
	}
	return ""
}

func (m *ParamsData) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type ParamsResult struct {
	Data                 *ParamsData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ParamsResult) Reset()         { *m = ParamsResult{} }
func (m *ParamsResult) String() string { return proto.CompactTextString(m) }
func (*ParamsResult) ProtoMessage()    {}
func (*ParamsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{8}
}
func (m *ParamsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParamsResult.Unmarshal(m, b)
}
func (m *ParamsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParamsResult.Marshal(b, m, deterministic)
}
func (dst *ParamsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResult.Merge(dst, src)
}
func (m *ParamsResult) XXX_Size() int {
	return xxx_messageInfo_ParamsResult.Size(m)
}
func (m *ParamsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResult.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResult proto.InternalMessageInfo

func (m *ParamsResult) GetData() *ParamsData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ParamsResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type Barpay struct {
	OutTradeID           string   `protobuf:"bytes,1,opt,name=OutTradeID,proto3" json:"OutTradeID,omitempty"`
	TradeName            string   `protobuf:"bytes,2,opt,name=TradeName,proto3" json:"TradeName,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ItemDes              string   `protobuf:"bytes,4,opt,name=ItemDes,proto3" json:"ItemDes,omitempty"`
	AuthCode             string   `protobuf:"bytes,5,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	UserID               string   `protobuf:"bytes,6,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MchID                string   `protobuf:"bytes,7,opt,name=MchID,proto3" json:"MchID,omitempty"`
	ShopID               string   `protobuf:"bytes,8,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	IPADDR               string   `protobuf:"bytes,9,opt,name=IPADDR,proto3" json:"IPADDR,omitempty"`
	AppID                string   `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Barpay) Reset()         { *m = Barpay{} }
func (m *Barpay) String() string { return proto.CompactTextString(m) }
func (*Barpay) ProtoMessage()    {}
func (*Barpay) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{9}
}
func (m *Barpay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Barpay.Unmarshal(m, b)
}
func (m *Barpay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Barpay.Marshal(b, m, deterministic)
}
func (dst *Barpay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barpay.Merge(dst, src)
}
func (m *Barpay) XXX_Size() int {
	return xxx_messageInfo_Barpay.Size(m)
}
func (m *Barpay) XXX_DiscardUnknown() {
	xxx_messageInfo_Barpay.DiscardUnknown(m)
}

var xxx_messageInfo_Barpay proto.InternalMessageInfo

func (m *Barpay) GetOutTradeID() string {
	if m != nil {
		return m.OutTradeID
	}
	return ""
}

func (m *Barpay) GetTradeName() string {
	if m != nil {
		return m.TradeName
	}
	return ""
}

func (m *Barpay) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Barpay) GetItemDes() string {
	if m != nil {
		return m.ItemDes
	}
	return ""
}

func (m *Barpay) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *Barpay) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Barpay) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *Barpay) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *Barpay) GetIPADDR() string {
	if m != nil {
		return m.IPADDR
	}
	return ""
}

func (m *Barpay) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

type Trade struct {
	OutTradeID string      `protobuf:"bytes,1,opt,name=OutTradeID,proto3" json:"OutTradeID,omitempty"`
	TradeID    string      `protobuf:"bytes,2,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	Amount     int64       `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ID         string      `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Status     Tradestatus `protobuf:"varint,5,opt,name=Status,proto3,enum=micro.proto3.ppp.Tradestatus" json:"Status,omitempty"`
	Type       Tradetype   `protobuf:"varint,6,opt,name=Type,proto3,enum=micro.proto3.ppp.Tradetype" json:"Type,omitempty"`
	MchID      string      `protobuf:"bytes,7,opt,name=MchID,proto3" json:"MchID,omitempty"`
	UserID     string      `protobuf:"bytes,8,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UpTime     int64       `protobuf:"varint,9,opt,name=UpTime,proto3" json:"UpTime,omitempty"`
	PayTime    int64       `protobuf:"varint,10,opt,name=PayTime,proto3" json:"PayTime,omitempty"`
	Create     int64       `protobuf:"varint,11,opt,name=Create,proto3" json:"Create,omitempty"`
	// appid  收款方id
	AppID string `protobuf:"bytes,12,opt,name=AppID,proto3" json:"AppID,omitempty"`
	// form 单据来源 alipay wxpay
	From                 string   `protobuf:"bytes,13,opt,name=From,proto3" json:"From,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{10}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (dst *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(dst, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetOutTradeID() string {
	if m != nil {
		return m.OutTradeID
	}
	return ""
}

func (m *Trade) GetTradeID() string {
	if m != nil {
		return m.TradeID
	}
	return ""
}

func (m *Trade) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Trade) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Trade) GetStatus() Tradestatus {
	if m != nil {
		return m.Status
	}
	return Tradestatus_waitepay
}

func (m *Trade) GetType() Tradetype {
	if m != nil {
		return m.Type
	}
	return Tradetype_BAR
}

func (m *Trade) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *Trade) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Trade) GetUpTime() int64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *Trade) GetPayTime() int64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

func (m *Trade) GetCreate() int64 {
	if m != nil {
		return m.Create
	}
	return 0
}

func (m *Trade) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Trade) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type TradeResult struct {
	Data                 *Trade   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeResult) Reset()         { *m = TradeResult{} }
func (m *TradeResult) String() string { return proto.CompactTextString(m) }
func (*TradeResult) ProtoMessage()    {}
func (*TradeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{11}
}
func (m *TradeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeResult.Unmarshal(m, b)
}
func (m *TradeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeResult.Marshal(b, m, deterministic)
}
func (dst *TradeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeResult.Merge(dst, src)
}
func (m *TradeResult) XXX_Size() int {
	return xxx_messageInfo_TradeResult.Size(m)
}
func (m *TradeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeResult.DiscardUnknown(m)
}

var xxx_messageInfo_TradeResult proto.InternalMessageInfo

func (m *TradeResult) GetData() *Trade {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TradeResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type Refund struct {
	RefundID    string `protobuf:"bytes,1,opt,name=RefundID,proto3" json:"RefundID,omitempty"`
	ID          string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	OutRefundID string `protobuf:"bytes,3,opt,name=OutRefundID,proto3" json:"OutRefundID,omitempty"`
	// 使用Trade.OutTradeID
	SourceID   string      `protobuf:"bytes,4,opt,name=SourceID,proto3" json:"SourceID,omitempty"`
	Amount     int64       `protobuf:"varint,5,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Status     Tradestatus `protobuf:"varint,6,opt,name=status,proto3,enum=micro.proto3.ppp.Tradestatus" json:"status,omitempty"`
	MchID      string      `protobuf:"bytes,7,opt,name=MchID,proto3" json:"MchID,omitempty"`
	UserID     string      `protobuf:"bytes,8,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UpTime     int64       `protobuf:"varint,9,opt,name=UpTime,proto3" json:"UpTime,omitempty"`
	RefundTime int64       `protobuf:"varint,10,opt,name=RefundTime,proto3" json:"RefundTime,omitempty"`
	Create     int64       `protobuf:"varint,11,opt,name=Create,proto3" json:"Create,omitempty"`
	AppID      string      `protobuf:"bytes,12,opt,name=AppID,proto3" json:"AppID,omitempty"`
	// 单据来源 alipay wxpay
	From                 string   `protobuf:"bytes,13,opt,name=From,proto3" json:"From,omitempty"`
	Memo                 string   `protobuf:"bytes,14,opt,name=Memo,proto3" json:"Memo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Refund) Reset()         { *m = Refund{} }
func (m *Refund) String() string { return proto.CompactTextString(m) }
func (*Refund) ProtoMessage()    {}
func (*Refund) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{12}
}
func (m *Refund) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Refund.Unmarshal(m, b)
}
func (m *Refund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Refund.Marshal(b, m, deterministic)
}
func (dst *Refund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refund.Merge(dst, src)
}
func (m *Refund) XXX_Size() int {
	return xxx_messageInfo_Refund.Size(m)
}
func (m *Refund) XXX_DiscardUnknown() {
	xxx_messageInfo_Refund.DiscardUnknown(m)
}

var xxx_messageInfo_Refund proto.InternalMessageInfo

func (m *Refund) GetRefundID() string {
	if m != nil {
		return m.RefundID
	}
	return ""
}

func (m *Refund) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Refund) GetOutRefundID() string {
	if m != nil {
		return m.OutRefundID
	}
	return ""
}

func (m *Refund) GetSourceID() string {
	if m != nil {
		return m.SourceID
	}
	return ""
}

func (m *Refund) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Refund) GetStatus() Tradestatus {
	if m != nil {
		return m.Status
	}
	return Tradestatus_waitepay
}

func (m *Refund) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *Refund) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Refund) GetUpTime() int64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *Refund) GetRefundTime() int64 {
	if m != nil {
		return m.RefundTime
	}
	return 0
}

func (m *Refund) GetCreate() int64 {
	if m != nil {
		return m.Create
	}
	return 0
}

func (m *Refund) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Refund) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Refund) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type RefundResult struct {
	Data                 *Refund  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefundResult) Reset()         { *m = RefundResult{} }
func (m *RefundResult) String() string { return proto.CompactTextString(m) }
func (*RefundResult) ProtoMessage()    {}
func (*RefundResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{13}
}
func (m *RefundResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefundResult.Unmarshal(m, b)
}
func (m *RefundResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefundResult.Marshal(b, m, deterministic)
}
func (dst *RefundResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefundResult.Merge(dst, src)
}
func (m *RefundResult) XXX_Size() int {
	return xxx_messageInfo_RefundResult.Size(m)
}
func (m *RefundResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RefundResult.DiscardUnknown(m)
}

var xxx_messageInfo_RefundResult proto.InternalMessageInfo

func (m *RefundResult) GetData() *Refund {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RefundResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type Account struct {
	ID     string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Token  string        `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Status Accountstatus `protobuf:"varint,3,opt,name=Status,proto3,enum=micro.proto3.ppp.Accountstatus" json:"Status,omitempty"`
	// MchID 商户号
	MchID string `protobuf:"bytes,4,opt,name=MchID,proto3" json:"MchID,omitempty"`
	// Form 来源 alipay wxpay
	From    string `protobuf:"bytes,5,opt,name=From,proto3" json:"From,omitempty"`
	Account string `protobuf:"bytes,6,opt,name=Account,proto3" json:"Account,omitempty"`
	// AppID 授权对应的appid
	AppID string `protobuf:"bytes,7,opt,name=AppID,proto3" json:"AppID,omitempty"`
	// SubAppID 微信子商户appid
	SubAppID             string   `protobuf:"bytes,8,opt,name=SubAppID,proto3" json:"SubAppID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{14}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Account) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Account) GetStatus() Accountstatus {
	if m != nil {
		return m.Status
	}
	return Accountstatus_unauth
}

func (m *Account) GetMchID() string {
	if m != nil {
		return m.MchID
	}
	return ""
}

func (m *Account) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Account) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Account) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Account) GetSubAppID() string {
	if m != nil {
		return m.SubAppID
	}
	return ""
}

type AccountResult struct {
	Data                 *Account `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               *Result  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountResult) Reset()         { *m = AccountResult{} }
func (m *AccountResult) String() string { return proto.CompactTextString(m) }
func (*AccountResult) ProtoMessage()    {}
func (*AccountResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{15}
}
func (m *AccountResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountResult.Unmarshal(m, b)
}
func (m *AccountResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountResult.Marshal(b, m, deterministic)
}
func (dst *AccountResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResult.Merge(dst, src)
}
func (m *AccountResult) XXX_Size() int {
	return xxx_messageInfo_AccountResult.Size(m)
}
func (m *AccountResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResult.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResult proto.InternalMessageInfo

func (m *AccountResult) GetData() *Account {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AccountResult) GetStatus() *Result {
	if m != nil {
		return m.Status
	}
	return nil
}

type AuthReq struct {
	Code                 string   `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	AppID                string   `protobuf:"bytes,2,opt,name=AppID,proto3" json:"AppID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthReq) Reset()         { *m = AuthReq{} }
func (m *AuthReq) String() string { return proto.CompactTextString(m) }
func (*AuthReq) ProtoMessage()    {}
func (*AuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ppp_d0a25bb9c8f74264, []int{16}
}
func (m *AuthReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthReq.Unmarshal(m, b)
}
func (m *AuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthReq.Marshal(b, m, deterministic)
}
func (dst *AuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthReq.Merge(dst, src)
}
func (m *AuthReq) XXX_Size() int {
	return xxx_messageInfo_AuthReq.Size(m)
}
func (m *AuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuthReq proto.InternalMessageInfo

func (m *AuthReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AuthReq) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func init() {
	proto.RegisterType((*Result)(nil), "micro.proto3.ppp.result")
	proto.RegisterType((*Scene)(nil), "micro.proto3.ppp.scene")
	proto.RegisterType((*Transfer)(nil), "micro.proto3.ppp.transfer")
	proto.RegisterType((*TransferResult)(nil), "micro.proto3.ppp.transferResult")
	proto.RegisterType((*User)(nil), "micro.proto3.ppp.user")
	proto.RegisterType((*UserResult)(nil), "micro.proto3.ppp.userResult")
	proto.RegisterType((*Params)(nil), "micro.proto3.ppp.params")
	proto.RegisterType((*ParamsData)(nil), "micro.proto3.ppp.paramsData")
	proto.RegisterType((*ParamsResult)(nil), "micro.proto3.ppp.paramsResult")
	proto.RegisterType((*Barpay)(nil), "micro.proto3.ppp.barpay")
	proto.RegisterType((*Trade)(nil), "micro.proto3.ppp.trade")
	proto.RegisterType((*TradeResult)(nil), "micro.proto3.ppp.tradeResult")
	proto.RegisterType((*Refund)(nil), "micro.proto3.ppp.refund")
	proto.RegisterType((*RefundResult)(nil), "micro.proto3.ppp.refundResult")
	proto.RegisterType((*Account)(nil), "micro.proto3.ppp.account")
	proto.RegisterType((*AccountResult)(nil), "micro.proto3.ppp.accountResult")
	proto.RegisterType((*AuthReq)(nil), "micro.proto3.ppp.authReq")
	proto.RegisterEnum("micro.proto3.ppp.Accounttype", Accounttype_name, Accounttype_value)
	proto.RegisterEnum("micro.proto3.ppp.Tradetype", Tradetype_name, Tradetype_value)
	proto.RegisterEnum("micro.proto3.ppp.Tradestatus", Tradestatus_name, Tradestatus_value)
	proto.RegisterEnum("micro.proto3.ppp.Accountstatus", Accountstatus_name, Accountstatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PPPClient is the client API for PPP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PPPClient interface {
	// alipay 支付宝
	AliPayParams(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error)
	AliBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error)
	AliRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error)
	AliCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	AliTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	AliAuthSigned(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountResult, error)
	AliAuth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AccountResult, error)
	AliBindUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResult, error)
	AliMchPay(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResult, error)
	//    // wxpay 微信服务商模式
	WXBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error)
	WXRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error)
	WXTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	WXCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	WXPayParam(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error)
	WXBindUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResult, error)
	WXAuthSigned(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountResult, error)
	//
	//    // wxpay_single 微信单商户模式
	WXSingleBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error)
	WXSingleRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error)
	WXSingleTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	WXSingleCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error)
	WXSinglePayParams(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error)
	WXSingleMchPay(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResult, error)
}

type pPPClient struct {
	cc *grpc.ClientConn
}

func NewPPPClient(cc *grpc.ClientConn) PPPClient {
	return &pPPClient{cc}
}

func (c *pPPClient) AliPayParams(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error) {
	out := new(ParamsResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliPayParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliBarPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error) {
	out := new(RefundResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliTradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliAuthSigned(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountResult, error) {
	out := new(AccountResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliAuthSigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliAuth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AccountResult, error) {
	out := new(AccountResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliBindUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliBindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) AliMchPay(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResult, error) {
	out := new(TransferResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/AliMchPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXBarPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error) {
	out := new(RefundResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXTradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXPayParam(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error) {
	out := new(ParamsResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXPayParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXBindUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXBindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXAuthSigned(ctx context.Context, in *Account, opts ...grpc.CallOption) (*AccountResult, error) {
	out := new(AccountResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXAuthSigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSingleBarPay(ctx context.Context, in *Barpay, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSingleBarPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSingleRefund(ctx context.Context, in *Refund, opts ...grpc.CallOption) (*RefundResult, error) {
	out := new(RefundResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSingleRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSingleTradeInfo(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSingleTradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSingleCancel(ctx context.Context, in *Trade, opts ...grpc.CallOption) (*TradeResult, error) {
	out := new(TradeResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSingleCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSinglePayParams(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ParamsResult, error) {
	out := new(ParamsResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSinglePayParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPPClient) WXSingleMchPay(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*TransferResult, error) {
	out := new(TransferResult)
	err := c.cc.Invoke(ctx, "/micro.proto3.ppp.PPP/WXSingleMchPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PPPServer is the server API for PPP service.
type PPPServer interface {
	// alipay 支付宝
	AliPayParams(context.Context, *Params) (*ParamsResult, error)
	AliBarPay(context.Context, *Barpay) (*TradeResult, error)
	AliRefund(context.Context, *Refund) (*RefundResult, error)
	AliCancel(context.Context, *Trade) (*TradeResult, error)
	AliTradeInfo(context.Context, *Trade) (*TradeResult, error)
	AliAuthSigned(context.Context, *Account) (*AccountResult, error)
	AliAuth(context.Context, *AuthReq) (*AccountResult, error)
	AliBindUser(context.Context, *User) (*UserResult, error)
	AliMchPay(context.Context, *Transfer) (*TransferResult, error)
	//    // wxpay 微信服务商模式
	WXBarPay(context.Context, *Barpay) (*TradeResult, error)
	WXRefund(context.Context, *Refund) (*RefundResult, error)
	WXTradeInfo(context.Context, *Trade) (*TradeResult, error)
	WXCancel(context.Context, *Trade) (*TradeResult, error)
	WXPayParam(context.Context, *Params) (*ParamsResult, error)
	WXBindUser(context.Context, *User) (*UserResult, error)
	WXAuthSigned(context.Context, *Account) (*AccountResult, error)
	//
	//    // wxpay_single 微信单商户模式
	WXSingleBarPay(context.Context, *Barpay) (*TradeResult, error)
	WXSingleRefund(context.Context, *Refund) (*RefundResult, error)
	WXSingleTradeInfo(context.Context, *Trade) (*TradeResult, error)
	WXSingleCancel(context.Context, *Trade) (*TradeResult, error)
	WXSinglePayParams(context.Context, *Params) (*ParamsResult, error)
	WXSingleMchPay(context.Context, *Transfer) (*TransferResult, error)
}

func RegisterPPPServer(s *grpc.Server, srv PPPServer) {
	s.RegisterService(&_PPP_serviceDesc, srv)
}

func _PPP_AliPayParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliPayParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliPayParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliPayParams(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliBarPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Barpay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliBarPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliBarPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliBarPay(ctx, req.(*Barpay))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliRefund(ctx, req.(*Refund))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliCancel(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliTradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliTradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliTradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliTradeInfo(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliAuthSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliAuthSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliAuthSigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliAuthSigned(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliAuth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliBindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliBindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliBindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliBindUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_AliMchPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).AliMchPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/AliMchPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).AliMchPay(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXBarPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Barpay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXBarPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXBarPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXBarPay(ctx, req.(*Barpay))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXRefund(ctx, req.(*Refund))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXTradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXTradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXTradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXTradeInfo(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXCancel(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXPayParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXPayParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXPayParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXPayParam(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXBindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXBindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXBindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXBindUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXAuthSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXAuthSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXAuthSigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXAuthSigned(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSingleBarPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Barpay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSingleBarPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSingleBarPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSingleBarPay(ctx, req.(*Barpay))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSingleRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSingleRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSingleRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSingleRefund(ctx, req.(*Refund))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSingleTradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSingleTradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSingleTradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSingleTradeInfo(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSingleCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSingleCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSingleCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSingleCancel(ctx, req.(*Trade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSinglePayParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSinglePayParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSinglePayParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSinglePayParams(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPP_WXSingleMchPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPPServer).WXSingleMchPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.proto3.ppp.PPP/WXSingleMchPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPPServer).WXSingleMchPay(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

var _PPP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "micro.proto3.ppp.PPP",
	HandlerType: (*PPPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AliPayParams",
			Handler:    _PPP_AliPayParams_Handler,
		},
		{
			MethodName: "AliBarPay",
			Handler:    _PPP_AliBarPay_Handler,
		},
		{
			MethodName: "AliRefund",
			Handler:    _PPP_AliRefund_Handler,
		},
		{
			MethodName: "AliCancel",
			Handler:    _PPP_AliCancel_Handler,
		},
		{
			MethodName: "AliTradeInfo",
			Handler:    _PPP_AliTradeInfo_Handler,
		},
		{
			MethodName: "AliAuthSigned",
			Handler:    _PPP_AliAuthSigned_Handler,
		},
		{
			MethodName: "AliAuth",
			Handler:    _PPP_AliAuth_Handler,
		},
		{
			MethodName: "AliBindUser",
			Handler:    _PPP_AliBindUser_Handler,
		},
		{
			MethodName: "AliMchPay",
			Handler:    _PPP_AliMchPay_Handler,
		},
		{
			MethodName: "WXBarPay",
			Handler:    _PPP_WXBarPay_Handler,
		},
		{
			MethodName: "WXRefund",
			Handler:    _PPP_WXRefund_Handler,
		},
		{
			MethodName: "WXTradeInfo",
			Handler:    _PPP_WXTradeInfo_Handler,
		},
		{
			MethodName: "WXCancel",
			Handler:    _PPP_WXCancel_Handler,
		},
		{
			MethodName: "WXPayParam",
			Handler:    _PPP_WXPayParam_Handler,
		},
		{
			MethodName: "WXBindUser",
			Handler:    _PPP_WXBindUser_Handler,
		},
		{
			MethodName: "WXAuthSigned",
			Handler:    _PPP_WXAuthSigned_Handler,
		},
		{
			MethodName: "WXSingleBarPay",
			Handler:    _PPP_WXSingleBarPay_Handler,
		},
		{
			MethodName: "WXSingleRefund",
			Handler:    _PPP_WXSingleRefund_Handler,
		},
		{
			MethodName: "WXSingleTradeInfo",
			Handler:    _PPP_WXSingleTradeInfo_Handler,
		},
		{
			MethodName: "WXSingleCancel",
			Handler:    _PPP_WXSingleCancel_Handler,
		},
		{
			MethodName: "WXSinglePayParams",
			Handler:    _PPP_WXSinglePayParams_Handler,
		},
		{
			MethodName: "WXSingleMchPay",
			Handler:    _PPP_WXSingleMchPay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ppp.proto",
}

func init() { proto.RegisterFile("proto/ppp.proto", fileDescriptor_ppp_d0a25bb9c8f74264) }

var fileDescriptor_ppp_d0a25bb9c8f74264 = []byte{
	// 1383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0xb5, 0x28, 0x89, 0x12, 0x47, 0xb2, 0xc3, 0x2c, 0x3e, 0x24, 0xfc, 0x54, 0xd7, 0x15, 0x78,
	0x65, 0xb8, 0x8d, 0x13, 0x38, 0x08, 0x7a, 0x59, 0x28, 0xa6, 0x93, 0x2a, 0x89, 0x63, 0x82, 0x72,
	0x20, 0xdd, 0xd2, 0xd4, 0xda, 0x66, 0x23, 0x91, 0x2c, 0x7f, 0x50, 0xe8, 0x0d, 0xfa, 0x26, 0x45,
	0x5f, 0xaa, 0x0f, 0xd0, 0xdb, 0xf6, 0xb6, 0x40, 0x31, 0xbb, 0x2b, 0x72, 0x19, 0x89, 0x89, 0x6b,
	0xe9, 0x4a, 0x33, 0xfb, 0x33, 0x9c, 0x3d, 0xe7, 0xcc, 0xec, 0x0a, 0x1e, 0x44, 0x71, 0x98, 0x86,
	0x4f, 0xa3, 0x28, 0x3a, 0x66, 0x16, 0xd1, 0xe7, 0xbe, 0x17, 0x87, 0xdc, 0x79, 0x7e, 0x1c, 0x45,
	0x91, 0x79, 0x0c, 0x6a, 0x4c, 0x93, 0x6c, 0x96, 0x12, 0x02, 0x0d, 0x2f, 0x9c, 0x52, 0xa3, 0xd6,
	0xaf, 0x1d, 0x36, 0x1d, 0x66, 0x13, 0x1d, 0xea, 0xf3, 0xe4, 0xc6, 0x50, 0xfa, 0xb5, 0x43, 0xcd,
	0x41, 0xd3, 0x7c, 0x02, 0xcd, 0xc4, 0xa3, 0x01, 0x9b, 0xfa, 0xe0, 0xbc, 0x63, 0xab, 0x35, 0x07,
	0x4d, 0x0c, 0xf0, 0xde, 0x9d, 0x53, 0xb1, 0x9a, 0xd9, 0xe6, 0xef, 0x0a, 0xb4, 0xd3, 0xd8, 0x0d,
	0x92, 0x6b, 0x1a, 0x93, 0x03, 0x80, 0x8b, 0x2c, 0xbd, 0x8c, 0xdd, 0x29, 0x1d, 0x5a, 0x62, 0xa7,
	0x34, 0x42, 0x7a, 0xd0, 0xfe, 0x90, 0xd0, 0x58, 0x0a, 0x92, 0xfb, 0xe4, 0x11, 0xa8, 0x83, 0x79,
	0x98, 0x05, 0xa9, 0x51, 0xef, 0xd7, 0x0e, 0xeb, 0x8e, 0xf0, 0xf0, 0xa3, 0x16, 0x4d, 0x3c, 0xa3,
	0xc1, 0x3f, 0x8a, 0x36, 0xae, 0x1d, 0xda, 0x03, 0xcb, 0x72, 0x8c, 0x26, 0x1b, 0x15, 0x1e, 0x31,
	0xa0, 0x35, 0xf0, 0x3c, 0x16, 0x44, 0x65, 0x13, 0x4b, 0x17, 0xa3, 0xbc, 0x8a, 0xc3, 0xb9, 0xd1,
	0xe2, 0x51, 0xd0, 0x26, 0x3f, 0x40, 0x47, 0x4c, 0x5f, 0x2e, 0x22, 0x6a, 0xb4, 0xfb, 0xb5, 0xc3,
	0xbd, 0x93, 0xaf, 0x8f, 0x3f, 0x45, 0xf0, 0xd8, 0xe5, 0x8b, 0xd2, 0x45, 0x44, 0x1d, 0x79, 0x07,
	0xf9, 0x1f, 0x34, 0x07, 0x51, 0x34, 0xb4, 0x0c, 0x8d, 0x45, 0xe5, 0x0e, 0x26, 0xb1, 0x44, 0x00,
	0x78, 0x12, 0xc2, 0x35, 0x63, 0xd8, 0x5b, 0x42, 0xe5, 0x70, 0x4a, 0x8e, 0xa1, 0x31, 0x75, 0x53,
	0x97, 0x41, 0xd5, 0x39, 0xe9, 0xad, 0x7e, 0x3b, 0x5f, 0xcf, 0xd6, 0x91, 0x67, 0xa0, 0x26, 0xa9,
	0x9b, 0x66, 0x09, 0x83, 0xaf, 0x73, 0x62, 0xac, 0xee, 0xe0, 0x64, 0x3b, 0x62, 0x9d, 0xf9, 0x5b,
	0x0d, 0x1a, 0x59, 0x42, 0x63, 0xc4, 0x0c, 0xb1, 0xce, 0x79, 0x11, 0x1e, 0xd9, 0x03, 0x65, 0x68,
	0x09, 0x36, 0x94, 0xa1, 0x85, 0x87, 0x3a, 0xf7, 0x6e, 0x87, 0x16, 0xa3, 0x41, 0x73, 0xb8, 0x93,
	0xe3, 0xd7, 0x90, 0xf0, 0xcb, 0x8f, 0xdf, 0x94, 0x8f, 0xff, 0x3d, 0xa8, 0x23, 0x9e, 0xa2, 0xca,
	0x00, 0xfd, 0xa6, 0x12, 0x50, 0x9e, 0xa1, 0x23, 0x96, 0x9b, 0x3f, 0x01, 0x60, 0xa2, 0x02, 0x99,
	0xa3, 0x12, 0x32, 0x8f, 0x56, 0x83, 0xb0, 0xb5, 0xf7, 0x45, 0xe5, 0xcf, 0x3a, 0xa8, 0x91, 0x1b,
	0xbb, 0xf3, 0x84, 0xec, 0x83, 0xe6, 0xd0, 0x34, 0x8b, 0x83, 0x42, 0xec, 0xc5, 0xc0, 0x27, 0x8a,
	0x56, 0x56, 0x14, 0xbd, 0x0f, 0x1a, 0x33, 0x99, 0xa4, 0x39, 0x62, 0xc5, 0x80, 0xa4, 0xe9, 0x66,
	0x49, 0xd3, 0x06, 0xb4, 0x86, 0x29, 0x9d, 0x5b, 0x34, 0x59, 0xea, 0x54, 0xb8, 0xb8, 0x63, 0x74,
	0x1b, 0x22, 0xa8, 0x5c, 0xa9, 0xc2, 0x43, 0x96, 0xce, 0x26, 0x4c, 0xa2, 0x9a, 0xa3, 0x9c, 0x4d,
	0x24, 0x36, 0xb5, 0x12, 0x9b, 0x39, 0x7b, 0x20, 0xb3, 0x57, 0xd4, 0x4b, 0xa7, 0x54, 0x2f, 0x4f,
	0xa0, 0x39, 0xc2, 0x5a, 0x37, 0xba, 0x0c, 0xb7, 0xc7, 0xab, 0xb8, 0xb1, 0x56, 0xe0, 0xf0, 0x55,
	0x18, 0xe6, 0x22, 0xa2, 0xc1, 0xd0, 0x32, 0x76, 0x79, 0x18, 0xee, 0x21, 0x08, 0xa3, 0xec, 0x4a,
	0x4c, 0xed, 0x71, 0x10, 0xf2, 0x01, 0x2c, 0xfa, 0x51, 0x76, 0xc5, 0x95, 0xf2, 0x80, 0x17, 0xfd,
	0xd2, 0x27, 0x4f, 0xa1, 0xc1, 0x6a, 0x4f, 0x67, 0x52, 0xf9, 0x6a, 0xad, 0xfe, 0xa7, 0x94, 0x55,
	0x1e, 0x5b, 0x88, 0x9f, 0x7a, 0x1f, 0xa6, 0xfe, 0xf5, 0x02, 0xd9, 0x7a, 0xc8, 0x3f, 0x95, 0x0f,
	0x14, 0x8a, 0x24, 0x92, 0x22, 0x4d, 0x0b, 0x80, 0x73, 0x6d, 0xa1, 0x58, 0x0e, 0x00, 0x46, 0x61,
	0x16, 0x7b, 0xd4, 0x5a, 0xca, 0x4b, 0x73, 0xa4, 0x11, 0x3c, 0xa4, 0xcd, 0x56, 0x0b, 0xb6, 0x85,
	0x67, 0xc6, 0xd0, 0xe5, 0x51, 0x84, 0x40, 0x9f, 0x95, 0x04, 0xba, 0xbf, 0x9a, 0x7a, 0xf1, 0xcd,
	0x7b, 0xcb, 0xf4, 0x57, 0x05, 0xd4, 0x2b, 0x37, 0x8e, 0xdc, 0xc5, 0x17, 0x5b, 0x6b, 0x49, 0x88,
	0x4a, 0xb5, 0x10, 0xeb, 0x55, 0x42, 0x6c, 0x94, 0x85, 0xd8, 0x83, 0xf6, 0x20, 0x4b, 0x6f, 0x4f,
	0xf1, 0xc2, 0xe0, 0xf5, 0x9d, 0xfb, 0x92, 0xf8, 0xd4, 0xf5, 0xe2, 0x6b, 0x7d, 0x22, 0x3e, 0x21,
	0xe9, 0x76, 0x49, 0xd2, 0x85, 0x28, 0xb5, 0x92, 0x28, 0x73, 0x12, 0x41, 0x26, 0xf1, 0x2f, 0x05,
	0x9a, 0x4c, 0x0c, 0x5f, 0x44, 0x42, 0xea, 0xbf, 0x4a, 0xa9, 0xff, 0x56, 0xa2, 0xc0, 0x5b, 0x60,
	0x23, 0x6f, 0x81, 0x2f, 0xf2, 0x16, 0xd6, 0xac, 0xba, 0x13, 0x58, 0x2a, 0xe5, 0x06, 0x96, 0x8b,
	0x59, 0xbd, 0xab, 0x98, 0x2b, 0xf1, 0x12, 0xe8, 0xb6, 0x4b, 0xe8, 0xe2, 0x78, 0x74, 0xe9, 0xcf,
	0x29, 0xc3, 0xab, 0xee, 0x08, 0x0f, 0xcf, 0x6b, 0xbb, 0x0b, 0x36, 0x01, 0x6c, 0x62, 0xe9, 0xe2,
	0x8e, 0xd3, 0x98, 0xba, 0x29, 0x65, 0x65, 0x5f, 0x77, 0x84, 0x57, 0x20, 0xdc, 0x95, 0x1b, 0xf7,
	0xb2, 0xc5, 0xef, 0x16, 0x2d, 0xde, 0x9c, 0x41, 0x87, 0x25, 0x2d, 0x34, 0xff, 0x6d, 0x49, 0xf3,
	0x8f, 0x2b, 0x4e, 0x78, 0x6f, 0xb9, 0xff, 0xa3, 0xe0, 0x5b, 0xe5, 0x3a, 0x0b, 0xa6, 0x28, 0x3f,
	0x87, 0x59, 0x39, 0xc5, 0xb9, 0xbf, 0x72, 0x63, 0xf5, 0xa1, 0x73, 0x91, 0xa5, 0xf9, 0x72, 0xde,
	0x85, 0xe5, 0x21, 0xd6, 0x82, 0x58, 0x85, 0xe7, 0x34, 0xe7, 0x7e, 0x65, 0x8f, 0x7e, 0x91, 0xa7,
	0xaf, 0xde, 0x49, 0x04, 0xfc, 0x77, 0x4b, 0x9c, 0x1e, 0x00, 0xf0, 0xe4, 0x25, 0x5a, 0xa5, 0x91,
	0xcd, 0x99, 0xc5, 0xb1, 0x73, 0x3a, 0x0f, 0x45, 0xbb, 0x66, 0xb6, 0x19, 0x40, 0x97, 0xc3, 0x2f,
	0xe8, 0xfe, 0xae, 0x44, 0xf7, 0x5a, 0xfe, 0xd8, 0xea, 0xfb, 0xf2, 0xfd, 0x47, 0x0d, 0x5a, 0xe2,
	0x2d, 0x20, 0x48, 0xad, 0xc9, 0xcf, 0x90, 0xcb, 0xf0, 0x23, 0x0d, 0x04, 0xcf, 0xdc, 0x91, 0x1e,
	0x17, 0xf5, 0xff, 0xf4, 0xb8, 0x28, 0x68, 0x69, 0xac, 0x7b, 0xd5, 0x34, 0x25, 0x60, 0xaa, 0xdf,
	0x90, 0x39, 0xb8, 0x2d, 0x19, 0x5c, 0xf9, 0x7a, 0x6b, 0x97, 0xaf, 0x37, 0x33, 0x82, 0x5d, 0x91,
	0x8e, 0x40, 0xf4, 0x49, 0x09, 0xd1, 0xff, 0x57, 0x66, 0x7f, 0x6f, 0x48, 0x9f, 0x43, 0xcb, 0xcd,
	0xd2, 0x5b, 0x87, 0xfe, 0x8c, 0x87, 0x3b, 0x5d, 0x3e, 0xf7, 0x35, 0x87, 0xd9, 0xc5, 0x11, 0x14,
	0xe9, 0x08, 0x47, 0x7d, 0xe8, 0x48, 0x6f, 0x5c, 0xa2, 0x82, 0xe2, 0x4f, 0xf5, 0x1d, 0xa2, 0x41,
	0x73, 0x16, 0xde, 0xf8, 0x81, 0x5e, 0x3b, 0xba, 0x00, 0x2d, 0x6f, 0x5e, 0xa4, 0x05, 0xf5, 0x97,
	0x03, 0x47, 0xdf, 0x41, 0x63, 0x3c, 0xb0, 0xf5, 0x1a, 0x1a, 0x03, 0xdb, 0xd6, 0x15, 0x36, 0x72,
	0xf6, 0x52, 0xaf, 0xe3, 0xde, 0x37, 0xa3, 0x81, 0x3d, 0xd4, 0x1b, 0x68, 0x9e, 0x0f, 0xdf, 0x0f,
	0x6d, 0xbd, 0x49, 0xda, 0xd0, 0x38, 0xc5, 0xad, 0xea, 0xd1, 0x58, 0x34, 0x16, 0x51, 0x35, 0x5d,
	0x68, 0xff, 0xe2, 0xfa, 0x29, 0x8d, 0xdc, 0x85, 0xbe, 0x83, 0xcb, 0x92, 0xcc, 0xf3, 0xf4, 0x1a,
	0x01, 0x7c, 0xa6, 0x2d, 0xfc, 0xe0, 0x46, 0x57, 0xd0, 0xf6, 0xdc, 0xc0, 0xa3, 0x33, 0xbd, 0xce,
	0xec, 0x59, 0x98, 0xd0, 0xa9, 0xde, 0xc0, 0xbd, 0x5c, 0x87, 0x74, 0xaa, 0x37, 0x8f, 0x9e, 0xe6,
	0x90, 0x8b, 0xd0, 0x00, 0x6a, 0x16, 0x20, 0x26, 0xfa, 0x0e, 0x9e, 0x2c, 0xfc, 0xc8, 0xc3, 0x5e,
	0x87, 0xf1, 0x95, 0x3f, 0xd5, 0x95, 0x93, 0xbf, 0xbb, 0x50, 0xb7, 0x6d, 0x9b, 0xbc, 0x81, 0xee,
	0x60, 0xe6, 0xdb, 0xee, 0x82, 0xdf, 0xf7, 0xc4, 0xa8, 0xba, 0xd1, 0x7b, 0x07, 0x55, 0x33, 0x9c,
	0x64, 0x73, 0x87, 0xbc, 0x02, 0x6d, 0x30, 0xf3, 0x5f, 0xba, 0xb1, 0xed, 0x2e, 0xd6, 0x05, 0xe2,
	0x77, 0x7a, 0xaf, 0xaa, 0xa5, 0xe4, 0x71, 0x5e, 0xb3, 0x38, 0xbc, 0xee, 0x49, 0x65, 0xfd, 0xad,
	0x4b, 0x48, 0xae, 0x63, 0x73, 0x87, 0x9c, 0xb1, 0x40, 0xa7, 0x0c, 0x3e, 0x52, 0xd5, 0xb7, 0xbf,
	0x9c, 0xcf, 0x8f, 0x0c, 0x23, 0x7e, 0x9d, 0x06, 0xd7, 0xe1, 0x06, 0x91, 0xce, 0x61, 0x77, 0x30,
	0xf3, 0xf1, 0x45, 0x31, 0xf2, 0x6f, 0x02, 0x3a, 0x25, 0xd5, 0xb5, 0xd0, 0xab, 0x2e, 0x72, 0x09,
	0xa8, 0x96, 0x08, 0xb7, 0x36, 0x10, 0xaf, 0x88, 0xbb, 0x04, 0x3a, 0x83, 0x0e, 0x32, 0xe7, 0x07,
	0xd3, 0x0f, 0xec, 0x4f, 0xd3, 0xfa, 0xff, 0x1d, 0xbd, 0xfd, 0x8a, 0xff, 0x23, 0xcb, 0x30, 0x6f,
	0x19, 0xde, 0xe7, 0xde, 0x2d, 0x0a, 0xe0, 0x33, 0x7f, 0xeb, 0x7a, 0xfd, 0xcf, 0xfc, 0xe5, 0x2b,
	0x72, 0x6a, 0x8f, 0x27, 0x9b, 0x8b, 0xe9, 0x15, 0x86, 0xd9, 0x82, 0x96, 0x5e, 0x43, 0x67, 0x3c,
	0xd9, 0x86, 0x06, 0x2c, 0x4c, 0x68, 0x0b, 0x9a, 0x84, 0xf1, 0x64, 0x59, 0xb6, 0x1b, 0x55, 0xad,
	0x85, 0x91, 0x36, 0xa6, 0xfe, 0x1d, 0x74, 0xc7, 0x93, 0xad, 0x09, 0xfb, 0x2d, 0xec, 0x8d, 0x27,
	0x23, 0x3f, 0xb8, 0x99, 0xd1, 0xcd, 0x15, 0xf0, 0xae, 0x08, 0xb6, 0x05, 0x1d, 0x9c, 0xc3, 0xc3,
	0x65, 0xb4, 0x6d, 0xa8, 0xe1, 0x4d, 0x91, 0xdc, 0xc6, 0x9a, 0xb8, 0x28, 0x52, 0xdb, 0x4e, 0x43,
	0xb7, 0x8b, 0xe4, 0xb6, 0x53, 0xd4, 0x57, 0x2a, 0x9f, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0xfe, 0xea, 0x03, 0xc2, 0x13, 0x00, 0x00,
}
